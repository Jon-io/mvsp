:!last-update-label:
:compat-mode!:
最小限のヴァイアブルセキュアプロダクト
=============================
MVSP ワークグループ <mvsp@groups.io>
v2.0.0, 2022-10-12

最小限のヴァイアブルセキュアプロダクトは、B2Bソフトウェアおよびビジネスプロセスアウトソーシングサプライヤーのための簡素化されたセキュリティチェックリストです。

シンプルさをデザインの要として、チェックリストには、製品の最小限のヴァイアブルセキュアプロダクト保持を確保するために実装されなければならないコントロールのみが含まれています。

我々は、すべての会社がB2Bソフトウェアを構築するか、あるいは最も広い定義の下で機密情報を取り扱う場合、少なくとも以下のコントロールを実装し、セキュリティプログラムでそれらを大幅に超えることを強く推奨します。

[cols="2,6a",stripes=none]
|===
2+<h|1 ビジネスコントロール
h|コントロール
h|説明

|1.1 脆弱性の報告
|* セキュリティ報告の連絡先をウェブサイトに掲載する
* セキュリティ報告に対して、合理的な時間内に対応する

|1.2 顧客テスト
|* 要求に応じて、顧客またはその代理人がアプリケーションのセキュリティをテストできるようにする
* 機能で本番環境に密接に類似した非本番環境でテストを行う
* 非本番環境に本番データが含まれていないことを確認する

|1.3 自己評価
|本書を使った年次（最低限）セキュリティ自己評価を実施する

|1.4 外部テスト
|セキュリティベンダーと契約し、年次の包括的なペネトレーションテストをシステム上で行う

|1.5 トレーニング
|業務機能に関連した役割別のセキュリティトレーニングを担当者に実施する

|1.6 準拠
|* 事業に関連するすべての業界セキュリティ規格に準拠する（PCI DSS、HITRUST、ISO27001、SSAE 18など）
* 御社および御客様に対して適用される管轄区内の法律および規制に準拠する (GDPR, 制約企業ルール、標準契約条項など)
* データローカリゼーション要件が現地の規制および契約義務に従って実装されることを確保する

|1.7 インシデント対応
|* 発見後72時間以内に遅滞なく顧客に違反を通知する
  * 通知に以下の情報を含める:
  **関連する連絡先
  **違反の予備技術分析
  ** 合理的な期間内で修復計画

|1.8 データ処理
|*NIST SP 800-88または同等の基準に基づいたメディア消去プロセスを実施することを確保する

2+<h| 2 アプリケーションデザインコントロール
h| コントロール
h| 説明

| 2.1 シングルサインオン
| 現代的で業界標準のプロトコルを使用してシングルサインオンを実装する

| 2.2 HTTPSのみ
| * HTTPプロトコル（ポート80）からHTTPS（ポート443）へのトラフィックをリダイレクトする

  これは、OCSPのような非暗号化接続の上で動作するように設計されたセキュアプロトコルには適用されません

  * 無料で利用可能な現代的なTLSスキャニングツールを使用して問題をスキャンし対処する
  * `includeSubdomains` ディレクティブを持つすべてのページにStrict-Transport-Securityヘッダーを含める

| 2.3 セキュリティヘッダー
| 適切なセキュリティヘッダーを適用し、アプリケーションの攻撃対象面を削減し、ポストエクスプロイテーションのリスクを制限する:

  * 最小限に許可されるContent Security Policyを設定する
  * 必要に応じて、アプリケーションの機密性の高いコンテンツへのiframeの能力を制限する

| 2.4 パスワードポリシー
| シングルサインオンに加えてパスワード認証が使用されている場合：

  * 使用できる文字を制限しない
  * パスワードの長さを64文字未満に制限しない
  * 秘密の質問をパスワードリセット要求の唯一の要件として使用しない
  * パスワード変更要求のメール承認を必要とする
  * パスワード変更時に現在のパスワードと新しいパスワードを必要とする
  * メモリハードまたはCPUハードな一方向ハッシュ関数を使用して、パスワードをハッシュ化およびソルティングされた形式で保存する
  * アカウントアクセスへの適切なアカウントロックアウトとブルートフォース保護を実施する

| 2.5 セキュリティライブラリ
| 出力のエスケープと入力のサニタイズを行うことにより、実装の弱点を体系的に対処するフレームワーク、テンプレート言語、またはライブラリを使用する

  例：データベースアクセス用のORM、DOMのレンダリング用のUIフレームワーク

| 2.6 依存関係のパッチ
| "中" 以上の重症度評価に対するセキュリティパッチを適用するか、アプリケーションスタックのすべてのコンポーネントについて、パッチリリースから1ヶ月以内に同等の軽減策が利用可能であることを確認する

| 2.7 ロギング
| 以下のログを保持する:

  * ユーザーのログインおよびログアウト
  * アプリケーションおよびシステムユーザーとオブジェクトの読み取り、書き込み、削除操作
  * セキュリティ設定の変更（ログの無効化を含む）
  * アプリケーション所有者が顧客データにアクセスする（アクセス透明性）

ログには、ユーザーID、IPアドレス、有効なタイムスタンプ、実行したアクションの種類、およびそのアクションの対象を含める必要があります。
ログは少なくとも30日間保管され、機密データやペイロードを含まないようにする必要があります。

| 2.8 暗号化
| 送信中のシステム間、オンラインデータストレージおよびバックアップで保管されているデータの機密性を保護するために、利用可能な暗号化手段を使用する

2+<h| 3 アプリケーション実装管理
h| 管理
h| 説明

| 3.1 データタイプのリスト
| アプリケーションが処理することが予想されるセンシィデータタイプのリストを維持する

| 3.2データフロー図
|どのようにしてセンシィデータがシステムに到達し、最終的にどこに保管されるかを示す最新の図を維持する

| 3.3脆弱性の防止
|開発者をトレーニングし、開発ガイドラインを実施して、少なくとも以下の脆弱性を防ぐ：

  * 認証のバイパス。例：一般のアカウントから他の顧客のデータや管理機能にアクセスする
  * セキュリティの低いセッションID。例：推測されるトークン;安全でない場所に保管されたトークン（例えば、secure及びhttpOnlyフラグが設定されていないクッキー）
  * インジェクション。例：SQLインジェクション、NoSQLインジェクション、XXE、OSコマンドインジェクション
  * クロスサイトスクリプティング。例：セキュリティーの低い JavaScript 関数の呼び出し、DOM 操作の不安全な実行、エスケープされていない HTML にユーザー入力を入力することをエコーする
  * クロスサイトリクエストフォージェリ。例：異なるドメインのOriginヘッダーを持つリクエストを受け入れる
  * 脆弱なライブラリの使用。例：既知の脆弱性を持つサーバーサイドのフレームワークやJavaScriptライブラリを使用する

| 3.4脆弱性の修復時間
| セキュリティに大きな影響を与えるアプリケーションの脆弱性に対処するパッチを発見から90日以内に作成・配布する

| 3.5ビルドプロセス
| ビルドプロセスは完全にスクリプト化/自動化されており、 https://slsa.dev/spec/v0.1/levels[SLSA Level 1] のプロビナンスを生成する必要があります。

2+<h| 4 運用上の管理
h| 管理
h| 説明

| 4.1物理アクセス
| 関連施設の物理的セキュリティを確認することで、以下の管理要素が適切に設置されていることを確認する：

  * 階層的な境界管理と内部障壁
  * 鍵へのアクセス管理
  * 出入りログ
  * 侵入者警報への適切な対応計画

| 4.2論理アクセス
| * 実際に必要なユーザ限りに、顧客データへのアクセスを制限する。データの所有者がアクセスを許可する必要がある
  * 余分なアカウントや期限切れのアクセス権限を迅速に非アクティブ化する
  * アクセスの適切性を確認する定期的なレビューを実施
  * 顧客データや運用システムへのリモートアクセスの要件を満たすために、多要素認証（MFA）を使用する

| 4.3 サブプロセッサ
| * 顧客データへのアクセス権を持つ第三者企業のリストをウェブサイトに公開する
  * この基準に基づき、第三者企業を年次監査する

| 4.4 バックアップとディザスタリカバリ
| * アプリケーションが実行されている場所とは別の場所にすべてのデータを安全にバックアップする
  * ディザスタリカバリ計画を維持し、定期的にテストする
  * バックアップの復元を定期的にテストする

|===

== ライセンス

この文書は、https://creativecommons.org/publicdomain/zero/1.0/[CC0 1.0 Universal] ライセンスの下でパブリックドメインです。